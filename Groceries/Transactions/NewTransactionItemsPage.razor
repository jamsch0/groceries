@using Groceries.Data
@using Microsoft.EntityFrameworkCore

@layout Layout

@inject AppDbContext DbContext

<PageTitle>Groceries &ndash; New Transaction</PageTitle>

<h1>New Transaction</h1>

<div class="form-field">
    @Transaction.CreatedAt.ToShortDateString() @Transaction.CreatedAt.ToLongTimeString() &ndash; @store
</div>

<form method="post">
    <div class="card form-field">
        <div class="card__header row">
            <h2 class="row__fill">Items</h2>
            <a class="button button--primary" href="/transactions/new/items/new" autofocus data-turbo-frame="modal">New item</a>
        </div>

        <div class="card__content card__content--table">
            <table>
                <thead>
                    <tr>
                        <th scope="col" class="table__header" style="width: 100%">Name</th>
                        <th scope="col" class="table__header">Price</th>
                        <th scope="col" class="table__header"><abbr title="Quantity">Qty</abbr></th>
                        <th scope="col" class="table__header">Amount</th>
                        <th scope="col" class="table__header"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Transaction.Items)
                    {
                        <tr>
                            <td class="table__cell table__cell--compact">
                                @itemNames.GetValueOrDefault(item.ItemId)
                            </td>
                            <td class="table__cell table__cell--compact table__cell--numeric">
                                @item.Price.ToString("c")
                            </td>
                            <td class="table__cell table__cell--compact table__cell--numeric">
                                @item.Quantity
                            </td>
                            <td class="table__cell table__cell--compact table__cell--numeric">
                                @item.Amount.ToString("c")
                            </td>
                            <td class="table__cell table__cell--compact">
                                <a class="link" href="/transactions/new/items/edit/@item.ItemId" data-turbo-frame="modal">Edit</a>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td class="table__cell table__cell--compact table__cell--total" colspan="3">Subtotal</td>
                        <td class="table__cell table__cell--compact table__cell--numeric table__cell--total">
                            @Transaction.Items.Sum(item => item.Amount).ToString("c")
                        </td>
                        <td class="table__cell table__cell--compact"></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <div class="row">
        <button class="button button--primary" type="submit" disabled="@(Transaction.Items.Count == 0)">Next</button>
        <a class="button" href="/transactions/new">Back</a>
    </div>
</form>

@code {
    [Parameter]
    public required Transaction Transaction { get; set; }

    private string store = string.Empty;
    private Dictionary<Guid, string> itemNames = new();

    protected override async Task OnParametersSetAsync()
    {
        store = await DbContext.Stores
            .Where(store => store.Id == Transaction.StoreId)
            .Select(store => string.Concat(store.Retailer!.Name, " ", store.Name))
            .SingleAsync();

        var itemIds = Transaction.Items.Select(item => item.ItemId);
        itemNames = await DbContext.Items
            .Where(item => itemIds.Contains(item.Id))
            .ToDictionaryAsync(item => item.Id, item => string.Concat(item.Brand, " ", item.Name));
    }
}
